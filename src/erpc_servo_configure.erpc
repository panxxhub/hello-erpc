program erpc_servo_configure


enum AxisType {
    D_AXIS = 0,
    Q_AXIS = 1,
};

enum ErpcAdcType {
    ERPC_ADC_VBUS = 0,
    ERPC_ADC_IBUS,
    ERPC_ADC_TEMP,
    ERPC_ADC_CURRENT0,
    ERPC_ADC_CURRENT1,
    ERPC_ADC_CURRENT2,
    ERPC_ADC_VOLTAGE0,
    ERPC_ADC_VOLTAGE1,
    ERPC_ADC_VOLTAGE2,
    ERPC_ADC_MAIN_ENCODER_SIN,
    ERPC_ADC_MAIN_ENCODER_COS,
};

struct DQ {
    float d;
    float q;
};

struct OscDataElement {
    int16 v_bus;
    int16[3] v_3d;
    int16[3] c_3d;
    uint32 timestamp;
};

struct PV {
    float p;
    float v;
};

const int32 servo_param_max_size = 8;
struct SdoSubEntry {
    uint8 sub_index;
    uint32 bitsize;
    uint8[servo_param_max_size] data;
};

const int32 sdo_max_sub_entry_size = 64;
struct Sdo {
    uint16 index;
    SdoSubEntry[sdo_max_sub_entry_size] sub_entries;
};


const int32 osc_fragment_max_size = 64;
struct OscDataFragment {
	int16 id;
	OscDataElement[osc_fragment_max_size] data;
};

const double velocity_to_rmp_ratio = 0.22731684623067849315702915191650390625;
struct MainEncoderInfo
{
    uint64 timestamp;
    int32 velocity;
    int32 single_turn;
    int16 single_turn_width;
    int32 multi_turn;
};


interface ServoConfigureService {
    //   axisAlign(in AxisType axis) -> void
    getAdcRaw(in ErpcAdcType adcType, out int32 value) -> int32
    getAdcSinCosRaw(out int32 sin, out int32 cos) -> int32
    getAdcCurrentRaw(out int32 a, out int32 b, out int32 c) -> int32
    getAdcVoltageRaw(out int32 a, out int32 b, out int32 c) -> int32

    //   setCurrentLoopRef(in DQ current) -> void
    //   exciteAndCapture(in int16 id, out OscDataFragment fragment) -> int32
    //   setSdo(in Sdo sdo) -> int32
    //   getSdoByIndex(in int16 index, out Sdo sdo) -> int32
    sdoLoadFactorySettings() -> int32
    sdoEntryLoadFactorySettings(in uint16 index) -> int32
    sdoSubEntryLoadFactorySettings(in uint16 index, in uint8 subIndex) -> int32

    setSdoSubEntry(in uint16 index, in SdoSubEntry subEntry) -> int32
    getSdoSubEntry(in uint16 index, in uint8 subIndex, out SdoSubEntry subEntry) -> int32

    saveAllToNonVolatileMemory() -> int32
    loadAllFromNonVolatileMemory() -> int32

    sdoSubEntrySaveToNonVolatileMemory(in uint16 index, in uint8 subIndex) -> int32
    sdoSubEntryLoadFromNonVolatileMemory(in uint16 index, in uint8 subIndex) -> int32
}