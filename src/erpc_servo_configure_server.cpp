/*
 * Generated by erpcgen 1.13.0 on Thu Aug 29 13:52:21 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "erpc_servo_configure_server.hpp"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 11300 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;
using namespace erpcShim;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif



// Constant variable definitions
#if defined(__MINGW32__)
__declspec( selectany )
#else
#pragma weak servo_param_max_size
#endif
extern const int32_t servo_param_max_size = 8;
#if defined(__MINGW32__)
__declspec( selectany )
#else
#pragma weak sdo_max_sub_entry_size
#endif
extern const int32_t sdo_max_sub_entry_size = 64;
#if defined(__MINGW32__)
__declspec( selectany )
#else
#pragma weak osc_fragment_max_size
#endif
extern const int32_t osc_fragment_max_size = 64;
#if defined(__MINGW32__)
__declspec( selectany )
#else
#pragma weak velocity_to_rmp_ratio
#endif
extern const double velocity_to_rmp_ratio = 0.227317;

//! @brief Function to read struct SdoSubEntry
static void read_SdoSubEntry_struct(erpc::Codec * codec, SdoSubEntry * data);


// Read struct SdoSubEntry function implementation
static void read_SdoSubEntry_struct(erpc::Codec * codec, SdoSubEntry * data)
{
    if(NULL == data)
    {
        return;
    }

    codec->read(data->sub_index);

    codec->read(data->bitsize);

    for (uint32_t arrayCount0 = 0U; arrayCount0 < 8U; ++arrayCount0)
    {
        codec->read(data->data[arrayCount0]);
    }
}


//! @brief Function to write struct SdoSubEntry
static void write_SdoSubEntry_struct(erpc::Codec * codec, const SdoSubEntry * data);


// Write struct SdoSubEntry function implementation
static void write_SdoSubEntry_struct(erpc::Codec * codec, const SdoSubEntry * data)
{
    if(NULL == data)
    {
        return;
    }

    codec->write(data->sub_index);

    codec->write(data->bitsize);

    for (uint32_t arrayCount0 = 0U; arrayCount0 < 8U; ++arrayCount0)
    {
        codec->write(data->data[arrayCount0]);
    }
}



ServoConfigureService_service::ServoConfigureService_service(ServoConfigureService_interface *_ServoConfigureService_interface)
    : erpc::Service(ServoConfigureService_interface::m_serviceId)
    , m_handler(_ServoConfigureService_interface)
{
}

ServoConfigureService_service::~ServoConfigureService_service()
{
}

// return service interface handler.
ServoConfigureService_interface* ServoConfigureService_service::getHandler(void)
{
    return m_handler;
}

// Call the correct server shim based on method unique ID.
erpc_status_t ServoConfigureService_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory, Transport * transport)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case ServoConfigureService_interface::m_setSdoSubEntryId:
        {
            erpcStatus = setSdoSubEntry_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case ServoConfigureService_interface::m_sdoLoadFactorySettingsId:
        {
            erpcStatus = sdoLoadFactorySettings_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case ServoConfigureService_interface::m_sdoEntryLoadFactorySettingsId:
        {
            erpcStatus = sdoEntryLoadFactorySettings_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case ServoConfigureService_interface::m_sdoSubEntryLoadFactorySettingsId:
        {
            erpcStatus = sdoSubEntryLoadFactorySettings_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case ServoConfigureService_interface::m_getSdoSubEntryId:
        {
            erpcStatus = getSdoSubEntry_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case ServoConfigureService_interface::m_saveAllToNonVolatileMemoryId:
        {
            erpcStatus = saveAllToNonVolatileMemory_shim(codec, messageFactory, transport, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for setSdoSubEntry of ServoConfigureService interface.
erpc_status_t ServoConfigureService_service::setSdoSubEntry_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint16_t index;
    SdoSubEntry *subEntry = NULL;
    subEntry = (SdoSubEntry *) erpc_malloc(sizeof(SdoSubEntry));
    if (subEntry == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }
    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(index);

    read_SdoSubEntry_struct(codec, subEntry);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->setSdoSubEntry(index, subEntry);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, ServoConfigureService_interface::m_serviceId, ServoConfigureService_interface::m_setSdoSubEntryId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    erpc_free(subEntry);

    return err;
}

// Server shim for sdoLoadFactorySettings of ServoConfigureService interface.
erpc_status_t ServoConfigureService_service::sdoLoadFactorySettings_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->sdoLoadFactorySettings();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, ServoConfigureService_interface::m_serviceId, ServoConfigureService_interface::m_sdoLoadFactorySettingsId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for sdoEntryLoadFactorySettings of ServoConfigureService interface.
erpc_status_t ServoConfigureService_service::sdoEntryLoadFactorySettings_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint16_t index;
    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(index);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->sdoEntryLoadFactorySettings(index);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, ServoConfigureService_interface::m_serviceId, ServoConfigureService_interface::m_sdoEntryLoadFactorySettingsId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for sdoSubEntryLoadFactorySettings of ServoConfigureService interface.
erpc_status_t ServoConfigureService_service::sdoSubEntryLoadFactorySettings_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint16_t index;
    uint8_t subIndex;
    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(index);

    codec->read(subIndex);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->sdoSubEntryLoadFactorySettings(index, subIndex);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, ServoConfigureService_interface::m_serviceId, ServoConfigureService_interface::m_sdoSubEntryLoadFactorySettingsId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for getSdoSubEntry of ServoConfigureService interface.
erpc_status_t ServoConfigureService_service::getSdoSubEntry_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint16_t index;
    uint8_t subIndex;
    SdoSubEntry *subEntry = NULL;
    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(index);

    codec->read(subIndex);

    subEntry = (SdoSubEntry *) erpc_malloc(sizeof(SdoSubEntry));
    if (subEntry == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->getSdoSubEntry(index, subIndex, subEntry);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, ServoConfigureService_interface::m_serviceId, ServoConfigureService_interface::m_getSdoSubEntryId, sequence);

        write_SdoSubEntry_struct(codec, subEntry);

        codec->write(result);

        err = codec->getStatus();
    }

    erpc_free(subEntry);

    return err;
}

// Server shim for saveAllToNonVolatileMemory of ServoConfigureService interface.
erpc_status_t ServoConfigureService_service::saveAllToNonVolatileMemory_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->saveAllToNonVolatileMemory();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, ServoConfigureService_interface::m_serviceId, ServoConfigureService_interface::m_saveAllToNonVolatileMemoryId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}
